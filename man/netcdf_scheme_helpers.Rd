% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/Schemes.R
\name{netcdf_scheme_helpers}
\alias{netcdf_scheme_helpers}
\alias{scheme_to_start}
\alias{scheme_to_count}
\alias{scheme_reframe}
\title{Use slabR Schemes with netcdf Files}
\usage{
scheme_to_start(slabr_scheme = scheme, fill = 1)

scheme_to_count(slabr_scheme = scheme, fill = -1)

scheme_reframe(slabr_scheme)
}
\arguments{
\item{slabr_scheme}{a dataframe containing a slabR summary scheme.}

\item{fill}{a vector of values to add to the end of start or count objects to control extra dimensions.}
}
\description{
These functions streamline the process of using slabR to summarise arrays contained within netcdf files
}
\details{
ncdf4 uses a convention of 2 vectors, start and count, to read in a subset of a file. `sceheme_to_start()` and
`scheme_to_count` create the vectors to read in the minimum amount of data that contains the points needed in
the summary scheme. The `fill` argument allows you to add additional elements to the end of these vectors if necessary.
NEMO_MEUDSA model outputs have a useless 4th dimension of length 1. The `fill` default accounts for this.

Reading in a subset of data may change the indices needed in the summary scheme. If the X, Y and layer vectors used
to generate the scheme were from the whole netcdf file, then using it on a smaller subset will result in index out 
of bound errors. `scheme_reframe()` fixes this by rescaling the indices to start from the smallest in each dimension,
now matching the netcdf subset.
}
\seealso{
Other NEMO-MEDUSA spatial tools: 
\code{\link{calculate_depth_share}()},
\code{\link{calculate_proximity_weight}()},
\code{\link{scheme_column}()},
\code{\link{scheme_interp_slice}()},
\code{\link{scheme_strathE2E}()},
\code{\link{stratify}()},
\code{\link{voronoi_grid}()},
\code{\link{xyindex_to_nindex}()}
}
\concept{NEMO-MEDUSA spatial tools}
